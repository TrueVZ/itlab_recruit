components:
  schemas:
    Check:
      properties:
        date:
          format: date-time
          nullable: true
          type: string
        id:
          type: integer
        payment:
          maxLength: 100
          nullable: true
          type: string
        purchases:
          items:
            $ref: '#/components/schemas/Purchase'
          type: array
        shop:
          maxLength: 100
          nullable: true
          type: string
        total:
          nullable: true
          type: integer
      type: object
    CreateCheck:
      properties:
        payment:
          type: string
        purchases:
          items:
            $ref: '#/components/schemas/CreatePurchase'
          type: array
        shop:
          type: string
      type: object
    CreatePurchase:
      properties:
        count:
          minimum: 1
          type: integer
        name:
          type: string
      type: object
    Purchase:
      properties:
        category:
          maxLength: 200
          nullable: true
          type: string
        count:
          nullable: true
          type: integer
        id:
          type: integer
        name:
          maxLength: 200
          nullable: true
          type: string
        price:
          nullable: true
          type: integer
      type: object
    User:
      properties:
        id:
          type: integer
        username:
          maxLength: 100
          nullable: true
          type: string
      type: object
info:
  title: PurchasesService API
  version: 0.0.1
openapi: 3.0.0
paths:
  /api/user/create:
    post:
      description: Create user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: User already exist
        default:
          description: Unexpected error
  /api/user/{user_id}:
    get:
      description: Get user by ID
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: Bad request
        '404':
          description: User not found
        default:
          description: Unexpected error
  /api/user/all:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
  /api/user/{user_id}/check/buy:
    post:
      description: Create check
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheck'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: Bad request
        '404':
          description: User not found
        default:
          description: Unexpected error
  /api/user/{user_id}/checks:
    get:
      description: Get checks
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Check'
                type: array
          description: OK
  /api/user/{user_id}/purchases/{purchase_id}:
    put:
      description: Change category purchase
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
      - in: path
        name: purchase_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                category:
                  type: string
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
          description: OK
        '400':
          description: Bad request
        '404':
          description: User or Purchase not found
        default:
          description: Unexpected error
